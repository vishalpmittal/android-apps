Goal: Create a ProgressBar that reflects the progress of some network requests.

Description:
In this exercise, we will leverage some additional features of the AsyncTask class, notably the ability to report incremental progress. This involves calling the method publishProgress in the doInBackground() method, which triggers a call to onProgressUpdate() method. The reason it must be done like this is that UI updates may not be done in the background thread. The onProgressUpdate() method is called in the main thread.

Directions:
1) Create a new Activity with a horizontal ProgressBar, a TextView, and a Submit button.
2) Create an ArrayList<String> to store the first line of each network response.
3) Implement a private, inner class called DelayTask.
  a) In onPreExecute(), show the hiddent ProgressBar.
  b) In doInBackground, download the 4 sites and call publishProgress after each site completes its download.
  c) In onProgressUpdate, update the ProgressBar.
  d) In onPostExecute, update the TextView with the downloaded responses.


## Snippets

ProgressBar pb;
TextView tvResult;
ArrayList<String> lines = new ArrayList<String>();

public void startFourUrlAsync(View v) {
     new DelayTask().execute();
}

public class DelayTask extends AsyncTask<Void, Integer, String> {
  int count = 0;
  @Override
  protected void onPreExecute() {
    pb.setVisibility(ProgressBar.VISIBLE);
  }

  @Override
  protected String doInBackground(Void... params) {
    String res = loadUrlBody("http://google.com");
    lines.add(res.split("\n")[0]);
    publishProgress(25);
    res = loadUrlBody("http://yahoo.com");
    lines.add(res.split("\n")[0]);
    publishProgress(50);
    res = loadUrlBody("http://twitter.com");
    lines.add(res.split("\n")[0]);
    publishProgress(75);
    res = loadUrlBody("http://facebook.com");
    lines.add(res.split("\n")[0]);
    publishProgress(100);
    return "complete";
  }

  @Override
  protected void onProgressUpdate(Integer... values) {
     pb.setProgress(values[0]);
  }

  @Override
  protected void onPostExecute(String result) {
    Toast.makeText(ProgressBarActivity.this, "Completed!", Toast.LENGTH_SHORT).show();
    tvResult.setText(lines.toString());
  }

  protected String loadUrlBody(String address) {
    HttpClient httpclient = new DefaultHttpClient();
    HttpResponse response = null;
    String responseString = null;
    try {
      response = httpclient.execute(new HttpGet(address));
      StatusLine statusLine = response.getStatusLine();
        if(statusLine.getStatusCode() == HttpStatus.SC_OK){
            ByteArrayOutputStream out = new ByteArrayOutputStream();
            response.getEntity().writeTo(out);
            out.close();
            responseString = out.toString();
        } else{
            response.getEntity().getContent().close();
            throw new IOException(statusLine.getReasonPhrase());
        }
    } catch (ClientProtocolException e) {
      // nothing
    } catch (IOException e) {
      // nothing
    }
    return responseString;
  }

}
