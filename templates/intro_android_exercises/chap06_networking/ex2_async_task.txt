Goal: Background a task using AsyncTasks.

Description:
For the most part, application code should run in the primary thread for simplicity. However, slow tasks such network access or disk access should be run in a background thread.

Android provides the AsyncTask class which handles much of the complexity of creating and managing threads. In the Activity that has a task to be backgrounded, implement one or more subclasses of AsyncTask as a private, inner class. AsyncTask is a generic class, whose parameters are the input type, output type, and metric for tracking progress. In this example, we will implement an AsyncTask that has no input and output, so those parameters will be Void.

An AsyncTask has a few methods, but the most commonly implemented are the doInBackground() and onPostExecute() methods. Any code that is in the doInBackground() method is automatically run in the background thread. Upon completion of the doInBackground method(), the AsyncTask will call the onPostExecute() method and run it in the main thread. This is useful because all UI methods MUST be run in the main thread or the application will crash.

In this exercise, we will simply count to 100,000 and display a Toast message when we're done counting.

Directions:
1) In the default Activity, implement MyAsyncTask as a subclass of AsyncTask<Void, Void, Void>
  a) In doInBackground, print out the numbers 0 to 100,000.
  b) In onPostExecute, display a Toast message.
2) In the onCreate method, instantiate an object of MyAsyncTask and call the execute() method.
3) Run the application and note that the Toast message will appear after some delay. If there is not a noticeable delay, increase the counter to 1,000,000 or more.


## Snippets

// In Activity
@Override
protected void onCreate(Bundle savedInstanceState) {
   // ...
   new MyAsyncTask().execute();
}

public void doneCounting() {
  Toast.makeText(this, "Done Counting to 100000", Toast.LENGTH_SHORT).show();
}

private class MyAsyncTask extends AsyncTask<Void, Void, Void> {
    public Void doInBackground(Void... params) {
      for (long i=0; i < 100000; i++) {
        System.out.println(i);
      }
      return null;
    }

    protected void onPostExecute(Void result) {
      doneCounting();
    }
}
