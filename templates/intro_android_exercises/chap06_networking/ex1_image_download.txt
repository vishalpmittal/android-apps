Goal: Download an image.

Description:
When making network requests, there are a couple of requirements: permissions and threading.

Android requires an application to request permissions for certain things, such as accessing the internet, the call log, the contact book, etc. Permissions are requested by listing them in AndroidManifest.xml.

Android is mostly single threaded. This is by design because it is easy to introduce undesirable behavior with multiple threads. However, accessing the network or the disk in the main thread will cause the main thread to be unresponsive to user interaction. Android added a concept called StrictMode that enforces the rule that network requests must never be made on the main thread. In the next lesson, we will learn how to move the network request to a background thread. For now, we will disable the StrictMode rule and download the image in the main thread.

Directions:
1) Modify AndroidManifest.xml to request the INTERNET permission.
2) Create a new Activity with an ImageView.
3) In the onCreate,
  a) Disable StrictMode for network access.
  b) Call a method, downloadImageFromUri(String address)
4) Implement downloadImageFromUri(String address)
  a) Create the URL from the string.
  b) Open a URLConnection.
  c) Get an InputStream from the connection.
  d) Decode the image using the BitmapFactory.
  e) Set the bitmap of the ImageView.


## Snippets

// Manifest
<uses-permission android:name="android.permission.INTERNET" />

// In Activity

@Override
protected void onCreate(Bundle savedInstanceState) {
  // ...
  StrictMode.setThreadPolicy(
        new StrictMode.ThreadPolicy.Builder().permitNetwork().build());
  downloadImageFromUri("http://...some/image/url");
}


private void downloadImageFromUri(String address) {
  URL url;
  try {
    url = new URL(address);
  } catch (MalformedURLException e1) {
    url = null;
  }

  URLConnection conn;
  InputStream in;
  Bitmap bitmap;
  try {
    conn = url.openConnection();
    conn.connect();
    in = conn.getInputStream();
    bitmap = BitmapFactory.decodeStream(in);
    in.close();
  } catch (IOException e) {
    bitmap = null;
  }

  if (bitmap != null) {
    ImageView img = (ImageView) findViewById(R.id.ivBasicImage);
    img.setImageBitmap(bitmap);
  }
}
